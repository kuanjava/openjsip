# Sample configuration file for Registrar service

# Comma separated list of domains registrar is responsible for.
# If not specified domain list will be retreived from Location Service.
#registrar.domains = openjsip.net

# Registrar needs connection to Location Service via RMI.
# These are Location service RMI connection settings.
registrar.location.service.rmi.host = localhost
registrar.location.service.rmi.port = 1099
registrar.location.service.rmi.objectname = LocationService

# Binding lifetime min / max, in seconds.
# This tells subscribers how often they should reregister.
registrar.binding.expire.time.min = 60
registrar.binding.expire.time.max = 3600 

# Setting the following property to 'yes' will require subscribers to authenticate itself.
# Authentication information is to be retreived from Location Service.
# Authentication is disabled by default.
# Note: It was mentioned that X-Lite cannot register when authentication
#       is enabled both in proxy and registrar. So be aware, you might have to
#       enable authenticatication only in one place.
registrar.authentication.enabled = no

# Registrar operation mode: standalone or via proxy
#registrar.operation.mode = standalone
registrar.operation.mode = viaproxy

# SNMP settings
# SNMP agent is enabled by default
registrar.snmp.agent.enabled = yes
# SNMP agent port, 1162 by default
registrar.snmp.agent.port = 1162
# SNMP community string, 'public' by default
registrar.snmp.agent.community = public

# -------------------------------------------------------------------------------------------- #
#                                VIAPROXY REGISTRAR CONFIGURATION                              #
# -------------------------------------------------------------------------------------------- #

# RMI settings in order the Proxy can connect to registrar
registrar.rmi.host = localhost
registrar.rmi.port = 1099
registrar.objectname = Registrar

# -------------------------------------------------------------------------------------------- #
#                                STANDALONE REGISTRAR CONFIGURATION                            #
# -------------------------------------------------------------------------------------------- #
# List of interfaces to listen for SIP requests
# By default registrar is listening on all interfaces, port 5060 via tcp, udp
#registrar.interface.1.addr = 192.168.0.1
#registrar.interface.1.port = 5060
#registrar.interface.1.transport = udp, tcp

# -------------------------------------------------------------------------------------------- #
#                                     LOGGING PROPERTIES                                       #
# -------------------------------------------------------------------------------------------- #
# Logging properties. See manuals and examples at http://logging.apache.org/log4j/1.2/manual.html

# Logging properties can be specified in a separate file.
#logging.properties = conf/logging.properties

# Logging channels
# Only that messages whose priority level greater or equals Threshold property will be logged.
# Priority levels: TRACE < DEBUG < INFO < WARN < ERROR < FATAL

# Attach logging channels to root logger
log4j.rootLogger=TRACE, consoleChannel, fileChannel

# Console channel. Logs messages to console
log4j.appender.consoleChannel.Threshold=INFO
log4j.appender.consoleChannel=org.apache.log4j.ConsoleAppender
log4j.appender.consoleChannel.layout=org.apache.log4j.PatternLayout
log4j.appender.consoleChannel.layout.ConversionPattern=%d %x [%t] %-5p - %m%n

# File channel. Logs messages to file
log4j.appender.fileChannel.Threshold=DEBUG
log4j.appender.fileChannel=org.apache.log4j.FileAppender
log4j.appender.fileChannel.File=logs/registrar.log
log4j.appender.fileChannel.Append=false
log4j.appender.fileChannel.layout=org.apache.log4j.PatternLayout
log4j.appender.fileChannel.layout.ConversionPattern=%d %x [%t] %-5p - %m%n


# ----------------------------------------------------------------------------- #
#              THE FOLLOWING SECTION IS FOR ADVANCED USERS                      #
#                                                                               #
#                        JAIN-SIP STACK PROPERTIES                              #
#                                                                               #
#         FOR FULL LIST OF PROPERTIES SEE JAVADOC OF JAIN-SIP LIBRARY AT        #
#                        https://jain-sip.dev.java.net/                         #
# ----------------------------------------------------------------------------- #

# Sets a user friendly name to identify the underlying stack implementation to the property value
# i.e. NISTv1.2. The stack name property should contain no spaces. This property is mandatory.
javax.sip.STACK_NAME = Registrar

# Sets the outbound proxy of the SIP Stack. The fromat for this string is "ipaddress:port/transport"
# i.e. 129.1.22.333:5060/UDP. This property is optional.
# javax.sip.OUTBOUND_PROXY =

# You can use the standard log4j level names here (i.e. ERROR, INFO, WARNING, OFF, DEBUG) If this is
# set to INFO (or TRACE) or above, then incoming valid messages are logged in SERVER_LOG. If you set
# this to 32 and specify a DEBUG_LOG then vast amounts of trace information will be dumped in to the
# specified DEBUG_LOG. The server log accumulates the signaling trace. This can be viewed using the
# trace viewer tool . Please send us both the server log and debug log when reporting non-obvious
# problems. You can also use the strings DEBUG or INFO for level 32 and 16 respectively. If the value
# of this property is set to LOG4J, then the effective log levels are determined from the log4j settings
# file (e.g. log4j.properties). The logger name for the stack is specified using the
# gov.nist.javax.sip.LOG4J_LOGGER_NAME property. By default log4j logger name for the stack is the
# same as the stack name. For example, properties.setProperty("gov.nist.javax.sip.TRACE_LEVEL", "LOG4J");
# properties.setProperty("gov.nist.javax.sip.LOG4J_LOGGER_NAME", "SIPStackLogger"); allows you to now
# control logging in the stack entirely using log4j facilities.
gov.nist.javax.sip.TRACE_LEVEL = 0

# Log valid incoming messages here. If this is left null AND the TRACE_LEVEL is above INFO (or TRACE)
# then the messages are printed to stdout. Otherwise messages are logged in a format that can later be
# viewed using the trace viewer application which is located in the tools/tracesviewer directory. Mail
# this to us with bug reports.
# gov.nist.javax.sip.SERVER_LOG = fileName

# Set true if you want to capture content into the log. Default is false. A bad idea to log content
# if you are using SIP to push a lot of bytes through TCP.
# gov.nist.javax.sip.DEBUG_LOG = fileName

# Default value is true. Setting this to false makes the Stack close the server socket after a Server
# Transaction goes to the TERMINATED state. This allows a server to protect against TCP based Denial
# of Service attacks launched by clients (ie. initiate hundreds of client transactions). If true (default
# action), the stack will keep the socket open so as to maximize performance at the expense of Thread
# and memory resources - leaving itself open to DOS attacks.
gov.nist.javax.sip.CACHE_SERVER_CONNECTIONS = false

# Default value is true. Setting this to false makes the Stack close the server socket after a Client
# Transaction goes to the TERMINATED state. This allows a client release any buffers threads and socket
# connections associated with a client transaction after the transaction has terminated at the expense
# of performance.
gov.nist.javax.sip.CACHE_CLIENT_CONNECTIONS = false

# Concurrency control for number of simultaneous active threads. If unspecificed, the default is "infinity".
# This feature is useful if you are trying to build a container.
#   * If this is not specified, and the listener is re-entrant, each event delivered to the listener
#     is run in the context of a new thread.
#   * If this is specified and the listener is re-entrant, then the stack will run the listener using a thread
#     from the thread pool. This allows you to manage the level of concurrency to a fixed maximum. Threads are
#     pre-allocated when the stack is instantiated.
#   * If this is specified and the listener is not re-entrant, then the stack will use the thread pool thread
#     from this pool to parse and manage the state machine but will run the listener in its own thread.
# gov.nist.javax.sip.THREAD_POOL_SIZE = 200

# Default is false. Set to true if the listener is re-entrant. If the listener is re-entrant then the stack
# manages a thread pool and synchronously calls the listener from the same thread which read the message.
# Multiple transactions may concurrently receive messages and this will result in multiple threads being active
# in the listener at the same time. The listener has to be written with this in mind. If you want good performance
# on a multithreaded machine write your listener to be re-entrant and set this property to be true
gov.nist.javax.sip.REENTRANT_LISTENER = true

# Max number of simultaneous TCP connections handled by stack.
# gov.nist.javax.sip.MAX_CONNECTIONS =

# Maximum size of content that a TCP connection can read. Must be at least 4K. Default is "infinity"
# -- ie. no limit. This is to prevent DOS attacks launched by writing to a TCP connection until the
# server chokes.
# gov.nist.javax.sip.MAX_MESSAGE_SIZE = 4K

# This is relevant for incoming TCP connections to prevent starvation at the server. This defines the timeout
# in miliseconds between successive reads after the first byte of a SIP message is read by the stack. All the sip
# headers must be delivered in this interval and each successive buffer must be of the content delivered in this interval.
# Default value is -1 (ie. the stack is wide open to starvation attacks) and the client can be as slow as it wants to be.
# gov.nist.javax.sip.READ_TIMEOUT = integer

# Maximum size of server transaction table. The low water mark is 80% of the high water mark.
# Requests are selectively dropped in the lowater mark to highwater mark range.
# Requests are unconditionally accepted if the table is smaller than the low water mark. The default highwater mark is 5000
gov.nist.javax.sip.MAX_SERVER_TRANSACTIONS = 5000

# Max number of active client transactions before the caller blocks and waits for the number
# to drop below a threshold. Default is unlimited, i.e. the caller never blocks and waits
# for a client transaction to become available (i.e. it does its own resource management in the application).
gov.nist.javax.sip.MAX_CLIENT_TRANSACTIONS = 5000

# Default is 8*1024. This property control the size of the UDP buffer used for SIP messages.
# Under load, if the buffer capacity is overflown the messages are dropped causing retransmissions,
# further increasing the load and causing even more retransmissions. Good values to this property
# for servers is a big number in the order of 8*8*1024.
# gov.nist.javax.sip.RECEIVE_UDP_BUFFER_SIZE = int

# Default is 8*1024. This property control the size of the UDP buffer used for SIP messages. Under load,
# if the buffer capacity is overflown the messages are dropped causing retransmissions, further increasing
# the load and causing even more retransmissions. Good values to this property for servers is a big number
# in the order of 8*8*1024 or higher.
# gov.nist.javax.sip.SEND_UDP_BUFFER_SIZE = int

# Defailt is true. If set to true stack will enforce queue length limitation for UDP. The Max queue size is 5000 messages.
# The minimum queue size is 2500 messages.
# gov.nist.javax.sip.CONGESTION_CONTROL_ENABLED = boolean